#
# DO NOT MODIFY!!!!
# This file is automatically generated by racc 1.4.5
# from racc grammer file "calc.y".
#

require 'racc/parser'


# $Id: calc.y,v 1.4 2005/11/20 13:29:32 aamine Exp $

def printList( pair )
  printObject( pair.car )
  cdr = pair.cdr
  case cdr
    when NilClass
    when Pair
      print " "
      printList( cdr )
    else
      print " . "
      printObject( cdr )
  end
end

def printObject( obj )
  case obj
    when NilClass
      print "()"
    when Pair
      print "("
      printList( obj )
      print ")"
    when Closure
      print "#<#closure #f>"
    else
      print obj
  end
end

def getVariableValue( name, var = [ { } ] )
  var.reverse_each { |item|
    if item.has_key?(name)
      return item[name]
    end
  }
  return nil
end

def formatString( str )
  str.gsub!( /\\n/, "\n" )

  return str
end

class Pair
  def initialize( car, cdr )
    @car = car
    @cdr = cdr
  end

  def car
    return @car
  end

  def cdr
    return @cdr
  end
end

class Closure
  def initialize( lmb, var )
    @lmb = lmb
    @var = var
  end

  def getLmb
    return @lmb
  end

  def run( var )
    nvar = @var.dup
    nvar << var
    return @lmb.getLeft.calc( nvar )
  end
end

class Node
  def initialize( page, type, left, right )
    @page = page
    @type = type
    @left = left
    @right = right
  end

  def getPage
    return @page
  end

  def getLeft
    return @left
  end

  def getRight
    return @right
  end

  def draw( indent = "", r = false )
    suffix = "  "
    if r
      suffix = "| "
    end

    case @type
      when "ELSE"
        return true
      when "LF_", "LD_"
        print indent + "+" + @page.to_s + " (" + @type + ")\n"
      when "ARG", "PRM", "CND"
        print indent + "+[LIST] (" + @type + ")\n"
        @page.each_with_index { |item, index|
          item.draw( indent + suffix, index + 1 < @page.size )
        }
        return
      when "LMB", "CAL"
        print indent + "+" + "lambda (" + @type + ")\n"
        @page.draw( indent + suffix, @left || @right )
      when "CONDITION"
        print indent + "+" + "[ITEM] (" + @type + ")\n"
        @page.draw( indent + suffix, @left || @right )
      when "PNT", "CAR", "CDR", "CONS", "ATOM", "PAIR", "LIST"
        print indent + "+[EMBED]" + " (" + @type + ")\n"
      else
        print indent + "+" + @page + " (" + @type + ")\n"
    end

    if @left
      @left.draw( indent + suffix, @right )
    elsif @right
      print indent + suffix + "+ (nil)\n"
    end

    if @right
      @right.draw( indent + suffix, false )
    end
  end

  def calc( var = [ { } ] )
    case @type
      when "OPR"
        case @page
          when "ASSIGN"
            var.reverse_each { |item|
              if item.has_key?(@left.getPage)
                return item[@left.getPage] = @right.calc(var)
              end
            }
            return var[var.size - 1][@left.getPage] = @right.calc(var)
          when "ADD"
            return @left.calc(var) + @right.calc(var)
          when "SUB"
            return @left.calc(var) - @right.calc(var)
          when "MUL"
            return @left.calc(var) * @right.calc(var)
          when "DIV"
            return @left.calc(var) / @right.calc(var)
          when "MOD"
            return @left.calc(var) % @right.calc(var)
          when "CAT"
            left = @left.calc(var)
            right = @right.calc(var)
            if left.class != String
              left = left.to_s
            end
            if right.class != String
              right = right.to_s
            end
            return left + right
          when "LT"
            return ( @left.calc(var) < @right.calc(var) ? true : false )
          when "LE"
            return ( @left.calc(var) <= @right.calc(var) ? true : false )
          when "GT"
            return ( @left.calc(var) > @right.calc(var) ? true : false )
          when "GE"
            return ( @left.calc(var) >= @right.calc(var) ? true : false )
          when "EQ"
            return ( @left.calc(var) == @right.calc(var) ? true : false )
          when "NE"
            return ( @left.calc(var) != @right.calc(var) ? true : false )
          when "INV"
            return -@left.calc(var)
          when "CST"
            res = @left.calc(var)
            if res.class == String
              return res
            else
              return res.to_s
            end
        end
      when "CND"
        @page.each { |item|
          if item.getPage.calc(var) != false
            return item.getLeft.calc(var)
          end
        }
      when "LMB"
        return Closure.new( self, var )
      when "CAL"
        lvar = { }
        closure = @page.calc( var )
        lmb = closure.getLmb
        @left.getPage.each_with_index { |item, index|
          lvar[ lmb.getPage.getPage[ index ].getPage ] = item.calc( var )
        }
        return closure.run( lvar )
      when "PNT"
        @left.getPage.each { |item|
          printObject( item.calc(var) )
        }
        return nil
      when "CONS"
        return Pair.new( @left.calc(var), @right.calc(var) )
      when "CAR"
        return @left.calc(var).car
      when "CDR"
        return @left.calc(var).cdr
      when "ATOM"
        case @left.calc(var)
          when Pair, nil
            return false
          else
            return true
        end
      when "PAIR"
        case @left.calc(var)
          when Pair, nil
            return true
          else
            return false
        end
      when "LIST"
        res = nil
        @left.getPage.reverse_each { |item|
          res = Pair.new( item.calc(var), res )
        }
        return res
      when "NOP"
        return nil
      when "VAR"
        return getVariableValue( @page, var )
      else
        return @page
    end
  end
end

class Calcp < Racc::Parser

module_eval <<'..end calc.y modeval..id9de83a6223', 'calc.y', 318
  def initialize
    @var = { }
  end

  def parse(str)
    @q = []
    until str.empty?
      case str
        when /\A\s+/
        when /\A;.*$/
        when /\A[0-9]+\.[0-9]*/
          @q.push [:FLOAT, $&.to_f]
        when /\A\d+/
          @q.push [:NUMBER, $&.to_i]
        when /\A[mM]od/
          @q.push ['%', $&]
        when /\Acond/
          @q.push [:COND, $&]
        when /\Aelse/
          @q.push [:ELSE, $&]
        when /\Aprint/
          @q.push [:PRINT, $&]
        when /\Acons/
          @q.push [:CONS, $&]
        when /\Acar/
          @q.push [:CAR, $&]
        when /\Acdr/
          @q.push [:CDR, $&]
        when /\Aatom\?/, /\A'/
          @q.push [:ATOM, $&]
        when /\Apair\?/, /\A'/
          @q.push [:ATOM, $&]
        when /\Alist/
          @q.push [:LIST, $&]
        when /\A[a-zA-Z_]+/
          @q.push [:VARIABLE, $&]
        when /\A"([^"]*)"/
          @q.push [:STRING, $1]
        when /\A<=/
          @q.push [:LE, $&]
        when /\A>=/
          @q.push [:GE, $&]
        when /\A==/
          @q.push [:EQ, $&]
        when /\A!=/
          @q.push [:NE, $&]
        when /\A.|\n/o
          s = $&
          @q.push [s, s]
      end
      str = $'
    end
    @q.push [false, '$end']
    do_parse
  end

  def next_token
    @q.shift
  end

..end calc.y modeval..id9de83a6223

##### racc 1.4.5 generates ###

racc_reduce_table = [
 0, 0, :racc_error,
 1, 36, :_reduce_none,
 0, 36, :_reduce_2,
 3, 37, :_reduce_3,
 3, 37, :_reduce_4,
 3, 37, :_reduce_5,
 3, 37, :_reduce_6,
 3, 37, :_reduce_7,
 3, 37, :_reduce_8,
 3, 37, :_reduce_9,
 3, 37, :_reduce_10,
 3, 37, :_reduce_11,
 3, 37, :_reduce_12,
 3, 37, :_reduce_13,
 3, 37, :_reduce_14,
 3, 37, :_reduce_15,
 3, 37, :_reduce_16,
 2, 37, :_reduce_17,
 2, 37, :_reduce_18,
 4, 37, :_reduce_19,
 1, 37, :_reduce_none,
 1, 39, :_reduce_none,
 1, 39, :_reduce_22,
 1, 39, :_reduce_23,
 1, 39, :_reduce_24,
 1, 39, :_reduce_25,
 7, 39, :_reduce_26,
 4, 39, :_reduce_27,
 4, 39, :_reduce_28,
 6, 39, :_reduce_29,
 4, 39, :_reduce_30,
 4, 39, :_reduce_31,
 4, 39, :_reduce_32,
 4, 39, :_reduce_33,
 4, 39, :_reduce_34,
 0, 42, :_reduce_35,
 1, 42, :_reduce_36,
 2, 42, :_reduce_37,
 5, 43, :_reduce_38,
 1, 40, :_reduce_39,
 0, 44, :_reduce_40,
 1, 44, :_reduce_41,
 3, 44, :_reduce_42,
 1, 41, :_reduce_43,
 0, 45, :_reduce_44,
 1, 45, :_reduce_45,
 3, 45, :_reduce_46,
 1, 38, :_reduce_47 ]

racc_reduce_n = 48

racc_shift_n = 105

racc_action_table = [
    32,    33,    35,    36,    37,    38,    39,    27,    28,    29,
    30,    31,    87,    34,    32,    33,    35,    36,    37,    16,
    19,    34,    34,    89,    86,    32,    33,    34,    12,    83,
    15,    18,    21,     1,     3,     4,     5,     7,    34,    10,
    13,    14,    17,    20,    82,     2,    16,    19,    81,    34,
    59,     2,    32,    33,    35,    12,    49,    15,    18,    21,
     1,     3,     4,     5,     7,    34,    10,    13,    14,    17,
    20,    47,     2,    16,    19,    44,    43,    94,     2,    32,
    33,    35,    12,    96,    15,    18,    21,     1,     3,     4,
     5,     7,    34,    10,    13,    14,    17,    20,    97,     2,
    16,    19,    41,    40,    26,    25,    24,    23,    22,    12,
   104,    15,    18,    21,     1,     3,     4,     5,     7,   nil,
    10,    13,    14,    17,    20,   nil,     2,    16,    19,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,    15,    18,
    21,     1,     3,     4,     5,     7,   nil,    10,    13,    14,
    17,    20,   nil,     2,    16,    19,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    12,   nil,    15,    18,    21,     1,     3,
     4,     5,     7,   nil,    10,    13,    14,    17,    20,   nil,
     2,    16,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,   nil,    15,    18,    21,     1,     3,     4,     5,     7,
   nil,    10,    13,    14,    17,    20,   nil,     2,    16,    19,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,    15,
    18,    21,     1,     3,     4,     5,     7,   nil,    10,    13,
    14,    17,    20,   nil,     2,    16,    19,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,   nil,    15,    18,    21,     1,
     3,     4,     5,     7,   nil,    10,    13,    14,    17,    20,
   nil,     2,    16,    19,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12,   nil,    15,    18,    21,     1,     3,     4,     5,
     7,   nil,    10,    13,    14,    17,    20,   nil,     2,    16,
    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,
    15,    18,    21,     1,     3,     4,     5,     7,   nil,    10,
    13,    14,    17,    20,   nil,     2,    16,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,   nil,    15,    18,    21,
     1,     3,     4,     5,     7,   nil,    10,    13,    14,    17,
    20,   nil,     2,    16,    19,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    12,   nil,    15,    18,    21,     1,     3,     4,
     5,     7,   nil,    10,    13,    14,    17,    20,   nil,     2,
    16,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,
   nil,    15,    18,    21,     1,     3,     4,     5,     7,   nil,
    10,    13,    14,    17,    20,   nil,     2,    16,    19,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    12,    84,    15,    18,
    21,     1,     3,     4,     5,     7,   nil,    10,    13,    14,
    17,    20,   nil,     2,    16,    19,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    12,   nil,    15,    18,    21,     1,     3,
     4,     5,     7,   nil,    10,    13,    14,    17,    20,   nil,
     2,    16,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,   nil,    15,    18,    21,     1,     3,     4,     5,     7,
   nil,    10,    13,    14,    17,    20,   nil,     2,    16,    19,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,    15,
    18,    21,     1,     3,     4,     5,     7,   nil,    10,    13,
    14,    17,    20,   nil,     2,    16,    19,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,   nil,    15,    18,    21,     1,
     3,     4,     5,     7,   nil,    10,    13,    14,    17,    20,
   nil,     2,    16,    19,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12,   nil,    15,    18,    21,     1,     3,     4,     5,
     7,   nil,    10,    13,    14,    17,    20,   nil,     2,    16,
    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,
    15,    18,    21,     1,     3,     4,     5,     7,   nil,    10,
    13,    14,    17,    20,   nil,     2,    16,    19,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    12,   nil,    15,    18,    21,
     1,     3,     4,     5,     7,   nil,    10,    13,    14,    17,
    20,   nil,     2,    16,    19,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    12,   nil,    15,    18,    21,     1,     3,     4,
     5,     7,   nil,    10,    13,    14,    17,    20,   nil,     2,
    16,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,
   nil,    15,    18,    21,     1,     3,     4,     5,     7,   nil,
    10,    13,    14,    17,    20,   nil,     2,    16,    19,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,    15,    18,
    21,     1,     3,     4,     5,     7,   nil,    10,    13,    14,
    17,    20,   nil,     2,    16,    19,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    12,   nil,    15,    18,    21,     1,     3,
     4,     5,     7,   nil,    10,    13,    14,    17,    20,   nil,
     2,    16,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,   nil,    15,    18,    21,     1,     3,     4,     5,     7,
   nil,    10,    13,    14,    17,    20,   nil,     2,    16,    19,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,    15,
    18,    21,     1,     3,     4,     5,     7,   nil,    10,    13,
    14,    17,    20,   nil,     2,    16,    19,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,   nil,    15,    18,    21,     1,
     3,     4,     5,     7,   nil,    10,    13,    14,    17,    20,
   nil,     2,    16,    19,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12,   nil,    15,    18,    21,     1,     3,     4,     5,
     7,   nil,    10,    13,    14,    17,    20,   nil,     2,    32,
    33,    35,    36,    37,    38,    39,    27,    28,    29,    30,
    31,   nil,    34,   nil,    15,    18,    21,     1,     3,     4,
     5,     7,    88,    10,    13,    14,    17,    20,   nil,     2,
    32,    33,    35,    36,    37,    38,    39,    27,    28,    29,
    30,    31,   nil,    34,    90,    32,    33,    35,    36,    37,
    38,    39,    27,    28,    29,    30,    31,   nil,    34,    91,
    32,    33,    35,    36,    37,    38,    39,    27,    28,    29,
    30,    31,   nil,    34,   103,    32,    33,    35,    36,    37,
    38,    39,    27,    28,    29,    30,    31,   nil,    34,    76,
    32,    33,    35,    36,    37,    38,    39,    27,    28,    29,
    30,    31,   nil,    34,    92,    32,    33,    35,    36,    37,
    38,    39,    27,    28,    29,    30,    31,   nil,    34,    93,
    32,    33,    35,    36,    37,    38,    39,    27,    28,    29,
    30,    31,   nil,    34,   102,    32,    33,    35,    36,    37,
    38,    39,    27,    28,    29,   nil,   nil,   nil,    34,    32,
    33,    35,    36,    37,    38,    39,    27,    28,    29,    30,
    31,   nil,    34,    32,    33,    35,    36,    37,    38,    39,
    27,    28,    29,    30,    31,   nil,    34,    32,    33,    35,
    36,    37,    38,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    34,    32,    33,    35,    36,    37,    38,    39,    27,    28,
    29,    30,    31,   nil,    34,    32,    33,    35,    36,    37,
    38,    39,    27,    28,    29,   nil,   nil,   nil,    34,    32,
    33,    35,    36,    37,    38,    39,    27,    28,    29,    30,
    31,   nil,    34,    32,    33,    35,    36,    37,    38,    32,
    33,    35,    36,    37,    38,   nil,    34,   nil,   nil,   nil,
   nil,   nil,    34,    32,    33,    35,    36,    37,    38,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    34 ]

racc_action_check = [
    53,    53,    53,    53,    53,    53,    53,    53,    53,    53,
    53,    53,    58,    53,    72,    72,    72,    72,    72,    39,
    39,    66,    67,    68,    56,    69,    69,    72,    39,    53,
    39,    39,    39,    39,    39,    39,    39,    39,    69,    39,
    39,    39,    39,    39,    52,    39,     0,     0,    50,    48,
    25,    22,    70,    70,    70,     0,    20,     0,     0,     0,
     0,     0,     0,     0,     0,    70,     0,     0,     0,     0,
     0,    17,     0,    49,    49,    14,    13,    80,    81,    71,
    71,    71,    49,    82,    49,    49,    49,    49,    49,    49,
    49,    49,    71,    49,    49,    49,    49,    49,    83,    49,
    97,    97,    10,     9,     7,     6,     5,     4,     3,    97,
   101,    97,    97,    97,    97,    97,    97,    97,    97,   nil,
    97,    97,    97,    97,    97,   nil,    97,    96,    96,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    96,   nil,    96,    96,
    96,    96,    96,    96,    96,    96,   nil,    96,    96,    96,
    96,    96,   nil,    96,    47,    47,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    47,   nil,    47,    47,    47,    47,    47,
    47,    47,    47,   nil,    47,    47,    47,    47,    47,   nil,
    47,    88,    88,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    88,   nil,    88,    88,    88,    88,    88,    88,    88,    88,
   nil,    88,    88,    88,    88,    88,   nil,    88,    86,    86,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    86,   nil,    86,
    86,    86,    86,    86,    86,    86,    86,   nil,    86,    86,
    86,    86,    86,   nil,    86,    12,    12,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    12,   nil,    12,    12,    12,    12,
    12,    12,    12,    12,   nil,    12,    12,    12,    12,    12,
   nil,    12,    44,    44,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    44,   nil,    44,    44,    44,    44,    44,    44,    44,
    44,   nil,    44,    44,    44,    44,    44,   nil,    44,    43,
    43,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    43,   nil,
    43,    43,    43,    43,    43,    43,    43,    43,   nil,    43,
    43,    43,    43,    43,   nil,    43,    41,    41,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    41,   nil,    41,    41,    41,
    41,    41,    41,    41,    41,   nil,    41,    41,    41,    41,
    41,   nil,    41,    40,    40,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    40,   nil,    40,    40,    40,    40,    40,    40,
    40,    40,   nil,    40,    40,    40,    40,    40,   nil,    40,
    19,    19,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    19,
   nil,    19,    19,    19,    19,    19,    19,    19,    19,   nil,
    19,    19,    19,    19,    19,   nil,    19,    54,    54,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    54,    54,    54,    54,
    54,    54,    54,    54,    54,    54,   nil,    54,    54,    54,
    54,    54,   nil,    54,    38,    38,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    38,   nil,    38,    38,    38,    38,    38,
    38,    38,    38,   nil,    38,    38,    38,    38,    38,   nil,
    38,    23,    23,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    23,   nil,    23,    23,    23,    23,    23,    23,    23,    23,
   nil,    23,    23,    23,    23,    23,   nil,    23,    24,    24,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,    24,
    24,    24,    24,    24,    24,    24,    24,   nil,    24,    24,
    24,    24,    24,   nil,    24,    37,    37,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    37,   nil,    37,    37,    37,    37,
    37,    37,    37,    37,   nil,    37,    37,    37,    37,    37,
   nil,    37,    26,    26,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    26,   nil,    26,    26,    26,    26,    26,    26,    26,
    26,   nil,    26,    26,    26,    26,    26,   nil,    26,    27,
    27,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    27,   nil,
    27,    27,    27,    27,    27,    27,    27,    27,   nil,    27,
    27,    27,    27,    27,   nil,    27,    28,    28,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    28,   nil,    28,    28,    28,
    28,    28,    28,    28,    28,   nil,    28,    28,    28,    28,
    28,   nil,    28,    29,    29,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    29,   nil,    29,    29,    29,    29,    29,    29,
    29,    29,   nil,    29,    29,    29,    29,    29,   nil,    29,
    30,    30,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    30,
   nil,    30,    30,    30,    30,    30,    30,    30,    30,   nil,
    30,    30,    30,    30,    30,   nil,    30,    31,    31,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    31,   nil,    31,    31,
    31,    31,    31,    31,    31,    31,   nil,    31,    31,    31,
    31,    31,   nil,    31,    36,    36,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    36,   nil,    36,    36,    36,    36,    36,
    36,    36,    36,   nil,    36,    36,    36,    36,    36,   nil,
    36,    33,    33,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    33,   nil,    33,    33,    33,    33,    33,    33,    33,    33,
   nil,    33,    33,    33,    33,    33,   nil,    33,    34,    34,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    34,   nil,    34,
    34,    34,    34,    34,    34,    34,    34,   nil,    34,    34,
    34,    34,    34,   nil,    34,    35,    35,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    35,   nil,    35,    35,    35,    35,
    35,    35,    35,    35,   nil,    35,    35,    35,    35,    35,
   nil,    35,    32,    32,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    32,   nil,    32,    32,    32,    32,    32,    32,    32,
    32,   nil,    32,    32,    32,    32,    32,   nil,    32,    60,
    60,    60,    60,    60,    60,    60,    60,    60,    60,    60,
    60,   nil,    60,   nil,    16,    16,    16,    16,    16,    16,
    16,    16,    60,    16,    16,    16,    16,    16,   nil,    16,
    75,    75,    75,    75,    75,    75,    75,    75,    75,    75,
    75,    75,   nil,    75,    75,    77,    77,    77,    77,    77,
    77,    77,    77,    77,    77,    77,    77,   nil,    77,    77,
   100,   100,   100,   100,   100,   100,   100,   100,   100,   100,
   100,   100,   nil,   100,   100,    42,    42,    42,    42,    42,
    42,    42,    42,    42,    42,    42,    42,   nil,    42,    42,
    78,    78,    78,    78,    78,    78,    78,    78,    78,    78,
    78,    78,   nil,    78,    78,    79,    79,    79,    79,    79,
    79,    79,    79,    79,    79,    79,    79,   nil,    79,    79,
    99,    99,    99,    99,    99,    99,    99,    99,    99,    99,
    99,    99,   nil,    99,    99,    64,    64,    64,    64,    64,
    64,    64,    64,    64,    64,   nil,   nil,   nil,    64,    98,
    98,    98,    98,    98,    98,    98,    98,    98,    98,    98,
    98,   nil,    98,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,   nil,     8,    73,    73,    73,
    73,    73,    73,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    73,    57,    57,    57,    57,    57,    57,    57,    57,    57,
    57,    57,    57,   nil,    57,    65,    65,    65,    65,    65,
    65,    65,    65,    65,    65,   nil,   nil,   nil,    65,    74,
    74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
    74,   nil,    74,    61,    61,    61,    61,    61,    61,    62,
    62,    62,    62,    62,    62,   nil,    61,   nil,   nil,   nil,
   nil,   nil,    62,    63,    63,    63,    63,    63,    63,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    63 ]

racc_action_pointer = [
    38,   nil,   nil,    91,    90,    89,   105,    87,   989,    87,
    85,   nil,   227,    59,    58,   nil,   825,    54,   nil,   362,
    39,   nil,    17,   443,   470,    50,   524,   551,   578,   605,
   632,   659,   794,   713,   740,   767,   686,   497,   416,    11,
   335,   308,   901,   281,   254,   nil,   nil,   146,    32,    65,
    21,   nil,    26,    -4,   389,   nil,    -3,  1017,    -6,   nil,
   825,  1059,  1065,  1079,   961,  1031,     4,     5,     5,    21,
    48,    75,    10,  1003,  1045,   856,   nil,   871,   916,   931,
    59,    44,    66,    81,   nil,   nil,   200,   nil,   173,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   119,    92,   975,   946,
   886,    92,   nil,   nil,   nil ]

racc_action_default = [
    -2,   -25,   -47,   -48,   -48,   -48,   -48,   -48,    -1,   -21,
   -48,   -20,   -48,   -48,   -48,   -22,   -48,   -48,   -23,   -48,
   -48,   -24,   -44,   -35,   -40,   -48,   -48,   -48,   -48,   -48,
   -48,   -48,   -48,   -48,   -40,   -48,   -48,   -48,   -48,   -48,
   -48,   -48,   -48,   -48,   -48,   -21,   -17,   -48,   -18,   -40,
   -43,   -45,   -48,   -48,   -48,   -36,   -39,   -41,   -48,   105,
   -48,   -10,   -11,   -12,   -13,   -14,    -5,    -6,   -48,    -7,
    -3,    -4,    -8,    -9,   -15,   -48,   -16,   -48,   -48,   -48,
   -48,   -48,   -48,   -48,   -27,   -37,   -48,   -28,   -48,   -19,
   -30,   -31,   -32,   -33,   -34,   -46,   -48,    -2,   -42,   -48,
   -48,   -48,   -29,   -26,   -38 ]

racc_goto_table = [
     6,    45,     8,    52,    54,    55,    46,    51,    50,   nil,
   nil,   nil,   nil,   nil,    42,   nil,   nil,   nil,   nil,   nil,
   nil,    48,   nil,   nil,   nil,    53,   nil,   nil,    60,    61,
    62,    63,    64,    65,    66,    67,    85,    69,    70,    71,
    72,    73,    74,    75,    58,    77,    78,   nil,   nil,    79,
   nil,   nil,   nil,   nil,    68,   nil,    53,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    95,   nil,   nil,    80,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    98,   nil,
    99,   nil,   nil,   nil,   nil,   nil,   nil,   101,   100,     8 ]

racc_goto_check = [
     1,     3,     2,     6,     7,     8,     4,     3,    10,   nil,
   nil,   nil,   nil,   nil,     2,   nil,   nil,   nil,   nil,   nil,
   nil,     2,   nil,   nil,   nil,     2,   nil,   nil,     2,     2,
     2,     2,     2,     2,     2,     2,     8,     2,     2,     2,
     2,     2,     2,     2,     5,     2,     2,   nil,   nil,     2,
   nil,   nil,   nil,   nil,     5,   nil,     2,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     3,   nil,   nil,     5,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     2,   nil,
     2,   nil,   nil,   nil,   nil,   nil,   nil,     1,     2,     2 ]

racc_goto_pointer = [
   nil,     0,     2,   -15,   -10,    20,   -19,   -19,   -18,   nil,
   -14 ]

racc_goto_default = [
   nil,   nil,    57,     9,    11,   nil,   nil,   nil,   nil,    56,
   nil ]

racc_token_table = {
 false => 0,
 Object.new => 1,
 :UMINUS => 2,
 :UCSTRING => 3,
 "*" => 4,
 "/" => 5,
 "%" => 6,
 "+" => 7,
 "-" => 8,
 "&" => 9,
 "<" => 10,
 :LE => 11,
 ">" => 12,
 :GE => 13,
 :EQ => 14,
 :NE => 15,
 "=" => 16,
 "(" => 17,
 ")" => 18,
 :NUMBER => 19,
 :FLOAT => 20,
 :STRING => 21,
 :ELSE => 22,
 "^" => 23,
 :COND => 24,
 :PRINT => 25,
 :CONS => 26,
 "," => 27,
 :CAR => 28,
 :CDR => 29,
 :ATOM => 30,
 :PAIR => 31,
 :LIST => 32,
 ":" => 33,
 :VARIABLE => 34 }

racc_use_result_var = true

racc_nt_base = 35

Racc_arg = [
 racc_action_table,
 racc_action_check,
 racc_action_default,
 racc_action_pointer,
 racc_goto_table,
 racc_goto_check,
 racc_goto_default,
 racc_goto_pointer,
 racc_nt_base,
 racc_reduce_table,
 racc_token_table,
 racc_shift_n,
 racc_reduce_n,
 racc_use_result_var ]

Racc_token_to_s_table = [
'$end',
'error',
'UMINUS',
'UCSTRING',
'"*"',
'"/"',
'"%"',
'"+"',
'"-"',
'"&"',
'"<"',
'LE',
'">"',
'GE',
'EQ',
'NE',
'"="',
'"("',
'")"',
'NUMBER',
'FLOAT',
'STRING',
'ELSE',
'"^"',
'COND',
'PRINT',
'CONS',
'","',
'CAR',
'CDR',
'ATOM',
'PAIR',
'LIST',
'":"',
'VARIABLE',
'$start',
'target',
'exp',
'var',
'trm',
'pms',
'ags',
'cds',
'cnd',
'prm',
'arg']

Racc_debug_parser = false

##### racc system variables end #####

 # reduce 0 omitted

 # reduce 1 omitted

module_eval <<'.,.,', 'calc.y', 19
  def _reduce_2( val, _values, result )
 result = Node.new( "NOP", "NOP", nil, nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 21
  def _reduce_3( val, _values, result )
 result = Node.new( "ADD", "OPR", val[0], val[2] )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 22
  def _reduce_4( val, _values, result )
 result = Node.new( "SUB", "OPR", val[0], val[2] )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 23
  def _reduce_5( val, _values, result )
 result = Node.new( "MUL", "OPR", val[0], val[2] )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 24
  def _reduce_6( val, _values, result )
 result = Node.new( "DIV", "OPR", val[0], val[2] )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 25
  def _reduce_7( val, _values, result )
 result = Node.new( "MOD", "OPR", val[0], val[2] )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 26
  def _reduce_8( val, _values, result )
 result = Node.new( "CAT", "OPR", val[0], val[2] )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 27
  def _reduce_9( val, _values, result )
 result = Node.new( "LT", "OPR", val[0], val[2] )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 28
  def _reduce_10( val, _values, result )
 result = Node.new( "LE", "OPR", val[0], val[2] )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 29
  def _reduce_11( val, _values, result )
 result = Node.new( "GT", "OPR", val[0], val[2] )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 30
  def _reduce_12( val, _values, result )
 result = Node.new( "GE", "OPR", val[0], val[2] )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 31
  def _reduce_13( val, _values, result )
 result = Node.new( "EQ", "OPR", val[0], val[2] )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 32
  def _reduce_14( val, _values, result )
 result = Node.new( "NE", "OPR", val[0], val[2] )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 33
  def _reduce_15( val, _values, result )
 result = Node.new( "ASSIGN", "OPR", val[0], val[2] )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 34
  def _reduce_16( val, _values, result )
 result = val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 35
  def _reduce_17( val, _values, result )
 result = Node.new( "INV", "OPR", val[1], nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 36
  def _reduce_18( val, _values, result )
 result = Node.new( "CST", "OPR", val[1], nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 37
  def _reduce_19( val, _values, result )
 result = Node.new( val[0], "CAL", val[2], nil )
   result
  end
.,.,

 # reduce 20 omitted

 # reduce 21 omitted

module_eval <<'.,.,', 'calc.y', 40
  def _reduce_22( val, _values, result )
 result = Node.new( val[0], "LD_", nil, nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 41
  def _reduce_23( val, _values, result )
 result = Node.new( val[0], "LF_", nil, nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 42
  def _reduce_24( val, _values, result )
 result = Node.new( formatString( val[0] ), "STR", nil, nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 43
  def _reduce_25( val, _values, result )
 result = Node.new( "ELSE", "ELSE", nil, nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 44
  def _reduce_26( val, _values, result )
 result = Node.new( val[2], "LMB", val[5], nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 45
  def _reduce_27( val, _values, result )
 result = Node.new( val[2], "CND", nil, nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 46
  def _reduce_28( val, _values, result )
 result = Node.new( nil, "PNT", val[2], nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 47
  def _reduce_29( val, _values, result )
 result = Node.new( nil, "CONS", val[2], val[4] )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 48
  def _reduce_30( val, _values, result )
 result = Node.new( nil, "CAR", val[2], nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 49
  def _reduce_31( val, _values, result )
 result = Node.new( nil, "CDR", val[2], nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 50
  def _reduce_32( val, _values, result )
 result = Node.new( nil, "ATOM", val[2], nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 51
  def _reduce_33( val, _values, result )
 result = Node.new( nil, "PAIR", val[2], nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 52
  def _reduce_34( val, _values, result )
 result = Node.new( nil, "LIST", val[2], nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 53
  def _reduce_35( val, _values, result )
 result = [ ]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 54
  def _reduce_36( val, _values, result )
 result = [ val[0] ]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 55
  def _reduce_37( val, _values, result )
 result = val[0] << val[1]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 56
  def _reduce_38( val, _values, result )
 result = Node.new( val[0], "CONDITION", val[3], nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 57
  def _reduce_39( val, _values, result )
 result = Node.new( val[0], "PRM", nil, nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 58
  def _reduce_40( val, _values, result )
 result = [ ]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 59
  def _reduce_41( val, _values, result )
 result = [ val[ 0 ] ]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 60
  def _reduce_42( val, _values, result )
 result = val[0] << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 61
  def _reduce_43( val, _values, result )
 result = Node.new( val[0], "ARG", nil, nil )
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 62
  def _reduce_44( val, _values, result )
 result = [ ]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 63
  def _reduce_45( val, _values, result )
 result = [ val[0] ]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 64
  def _reduce_46( val, _values, result )
 result = val[0] << val[2]
   result
  end
.,.,

module_eval <<'.,.,', 'calc.y', 65
  def _reduce_47( val, _values, result )
 result = Node.new( val[0], "VAR", nil, nil )
   result
  end
.,.,

 def _reduce_none( val, _values, result )
  result
 end

end   # class Calcp


parser = Calcp.new
vartbl = [ { "true" => true, "false" => false } ]
while true
  print 'alish> '
  str = gets.chop!
  break if /exit/i =~ str
  begin
    cls = parser.parse(str)
    res = cls.calc( vartbl )
    if getVariableValue( "stree", vartbl ) != 0
      cls.draw
    end
    if getVariableValue( "echo", vartbl ) != 0
      printObject( res )
      puts
    end
  rescue ParseError
    puts $!
  end
end

